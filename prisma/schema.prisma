generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

model Account {
    id                 Int      @id @default(autoincrement())
    userId             Int
    type               String
    provider           String
    providerAccountId  String
    refresh_token      String?  @db.Text
    access_token       String?  @db.Text
    expires_at         Int?
    token_type         String?
    scope              String?
    id_token           String?  @db.Text
    session_state      String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])

    @@map("user_accounts")
}

model Session {
    id           Int      @id @default(autoincrement())
    sessionToken String   @unique
    userId       Int
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@map("user_sessions")
}

model User {
    id            Int      @id @default(autoincrement())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    balance       Float     @default(0)
    role          Role      @default(USER)

    createdAt DateTime @default(now()) 

    accounts      Account[]
    sessions      Session[]
    posts         Post[]
    comments      Comments[]
    savedPosts    SavedPosts[]
    payments      Payments[]
    products      Product[]
    purchases     UserPurchases[]

    @@map("users")
}

enum Role {
    USER
    ADMIN
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])

    @@map("verification_tokens")
}

model Post {
    id        Int      @id @default(autoincrement())
    title     String
    content   String   @db.Text
    authorId  Int

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    author    User     @relation(fields: [authorId], references: [id])
    comments  Comments[]
    saves     SavedPosts[]

    @@map("posts")
}

model Comments {
    id        Int      @id @default(autoincrement())
    content   String
    authorId  Int

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    author    User    @relation(fields: [authorId], references: [id])
    postId    Int
    post      Post    @relation(fields: [postId], references: [id])

    @@map("post_comments")
}

model SavedPosts {
    id        Int      @id @default(autoincrement())
    userId    Int
    postId    Int
    post      Post     @relation(fields: [postId], references: [id])
    user      User     @relation(fields: [userId], references: [id])

    @@unique([userId, postId])

    @@map("user_saved_posts")
}

model Payments {
    id       Int      @id @default(autoincrement())
    userId   Int
    amount   Float
    orderId  String
    status  String @default("pending")
    payerId  String?
    paymentId String?
    facilitatorAccessToken String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user     User     @relation(fields: [userId], references: [id])

    @@map("payments")
}

model Product {
    id          Int      @id @default(autoincrement())
    authorId    Int
    title        String
    description String   @db.Text
    price       Float
    image       String

    author      User     @relation(fields: [authorId], references: [id])
    purchases   UserPurchases[]

    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    @@map("products")
}

model UserPurchases {
    id        Int      @id @default(autoincrement())
    userId    Int
    productId Int
    code      String
    status    String @default("pending")

    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    product   Product  @relation(fields: [productId], references: [id])
    user      User     @relation(fields: [userId], references: [id])

    @@map("user_purchases")
}