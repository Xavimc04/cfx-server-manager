generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

model Account {
    id                 Int      @id @default(autoincrement())
    userId             Int
    type               String
    provider           String
    providerAccountId  String
    refresh_token      String?  @db.Text
    access_token       String?  @db.Text
    expires_at         Int?
    token_type         String?
    scope              String?
    id_token           String?  @db.Text
    session_state      String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           Int      @id @default(autoincrement())
    sessionToken String   @unique
    userId       Int
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            Int      @id @default(autoincrement())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?

    createdAt DateTime @default(now()) 

    accounts      Account[]
    sessions      Session[]
    posts         Post[]
    comments      Comments[]
    starredPosts  StarredPosts[]
    likedPosts    LikedPosts[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Post {
    id        Int      @id @default(autoincrement())
    title     String
    content   String   @db.Text
    published Boolean  @default(false)
    authorId  Int

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    author    User     @relation(fields: [authorId], references: [id])
    tags      Tags[]
    comments  Comments[]
    stars     StarredPosts[]
    likes     LikedPosts[]

    @@map("posts")
}

model Tags {
    id    Int      @id @default(autoincrement())
    name  String
    posts Post[]

    @@map("post_tags")
}

model Comments {
    id        Int      @id @default(autoincrement())
    content   String
    authorId  Int

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    author    User    @relation(fields: [authorId], references: [id])
    postId    Int
    post      Post    @relation(fields: [postId], references: [id])

    @@map("post_comments")
}

model StarredPosts {
    id        Int      @id @default(autoincrement())
    userId    Int
    postId    Int
    post      Post     @relation(fields: [postId], references: [id])
    user      User     @relation(fields: [userId], references: [id])

    @@unique([userId, postId])

    @@map("user_starred_posts")
}

model LikedPosts {
    id        Int      @id @default(autoincrement())
    userId    Int
    postId    Int
    post      Post     @relation(fields: [postId], references: [id])
    user      User     @relation(fields: [userId], references: [id])

    @@unique([userId, postId])

    @@map("user_liked_posts")
}